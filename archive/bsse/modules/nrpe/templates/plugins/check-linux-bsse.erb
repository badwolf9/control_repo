#!/bin/bash
#
# This file was autogenerated on <%= File.mtime(@file).strftime("%m/%d/%Y %T %Z") %> by puppet <%= @puppetversion %>
# It can still be managed manually but will be overwritten on the next run.
# SVN <%= %x(svn info #{file} | grep Revision | tr -d "\n")%>
#
#
#	Note : ALL clients execute this, therefore this script should not throw warnings and/or errors
#

echo "This plugin is obsolete, please unconfigure and use the log-collector"
exit 1

EXIT=0
PID=$$
PROCS=`ps ax | grep check_autofs_bsse |grep -v grep`
UNAME=`uname -a`


#	ERB tests
ERB_OSNAME=<%= @operatingsystem %>
ERB_OSREL=<%= @operatingsystemrelease %>
ERB_OSMAJOR=<%= @lsbmajdistrelease %>
ERB_FACTERVER=<%= @facterversion %>
ERB_PUPPETVER=<%= @puppetversion %>
<% if @operatingsystem =~ /RedHat|CentOS|Fedora/ %>ERB_REDHAT=1<% end %>
<% if @operatingsystem =~ /Debian|Ubuntu/ %>ERB_DEBIAN=1<% end %>

# Test for these processes if they run
UNWANTED_PROCS="pcscd hplip bluetooth krb5-auth-dialog winbindd hpssd.py yum-updatesd"
<% if classes.include?("hw_kvm") %>UNWANTED_PROCS="$UNWANTED_PROCS smartd"<% end %>

function setLogState(){
#
# SRC is the SOURCE of the error
# LVL is 1,2,3 (warn,err,unknown) - see nagios
# LOG is the loginfo
# LOGFILE is the logfile with further details (not mandatory)
#
# The output format is : timestamp:source:level:detailed_logfile:comment/loginfo
#
        SRC=$1
        LVL=$2
        LOG=$3
        LOGFILE=$4
        TIME=`date "+%s"`
        LOGDEST="/var/log/nagios-collector.log";
        echo "$SRC:$TIME:$LVL:$LOGFILE:$LOG" >>$LOGDEST
}


if [ ! -z "`echo $PROCS | grep -v $PID`" ]; then
        echo $PROCS
#        MSG="$MSG Detected stale check script on $HOSTNAME!. $$ $PID $PID2"
	setLogState "linux-bsse-misc" 3 "Detected stale check script on $HOSTNAME!"
	exit 3
else
	#
	# Determine parameters
	#
	# See http://aplawrence.com/Unix/getopts.html for getopts tutorial
	args=`getopt apo $*`
	if test $? != 0
	     then
	         echo 'Usage: $0 [-p to check for portmap][-a to check autofs stuff]'
	         exit 1
	fi
	set -- $args
	for i
	do
	  case "$i" in
	        -p) shift;export PMAP=1;shift;;
	        -a) shift;export AUTOFS=1;shift;;
	        -o) shift;export OSTEST=1;shift;;
	  esac
	done
<% if classes.include?("hw_dell") %>
	if [ -e /opt/dell/srvadmin/etc/omreg.cfg ]; then
		OMVER=`grep openmanage.version /opt/dell/srvadmin/etc/omreg.cfg | awk -F= '{print $2}'`
                if [[ "$OMVER" < "6.4.0" ]]; then
			MSG="This server runs an old OpenManage (V$OMVER). Please update to 6.4.0.<br>"
			EXIT=3
		fi
	fi
	if [ -d /opt/dell/srvadmin/ ]; then
		DELLOM=`/bin/netstat -lanpt|grep LIST|grep 1311 | grep -v 127.0.0.1`
		if [ ! -z "$DELLOM" ]; then
			MSG="$MSG This system has the Dell OM Webservice enabled globally. Please change to localhost or disable"
			EXIT=3
		fi
	fi
<% end %>
	#	Check for even broadcast adresses (which is faulty)

	OUT=`/sbin/ifconfig |grep Bcast | sed "s/.*Bcast://"|sed "s/ .*//"|awk -F\. '{ if( $4%2 ==0 ){print "Broadcast adress "$1"."$2"."$3"."$4" not valid."}}'`
	if [ ! -z "$OUT" ]; then
		MSG="$MSG $OUT"
		EXIT=3
	fi

	OUT=`echo $IFCFG| grep inet6`
	if [ ! -z "$OUT" ]; then
		#MSG="$MSG This system has IPv6 enabled. Please disable.<BR>"
		MSG="$MSG This system has IPv6 enabled. Please disable.<BR>"
		EXIT=3
	fi

	# Check for portmapper on all ports

	if [ "$PMAP" == "1" ]; then
		OUT=`grep PMAP_ARGS /etc/sysconfig/network`
		if [ -z "$OUT" ]; then
			ENABLED=`chkconfig --list|grep portmap|grep :on`
			if [ ! -z "$ENABLED" ]; then
			#	MSG="$MSG Portmapper listens on *.*:111 and is enabled."
				MSG="$MSG Portmapper listens on *.*:111 and is enabled."
			fi
			EXIT=3
		fi
	fi
<% if classes.include?("service_autofs") %>
	#	Check for autofs stuff
	#
	if [ "$AUTOFS" == 1 ]; then
	   AUTOFS_OUT=`ps ax|grep automount|grep -v grep`
	   if [ ! -z "$AUTOFS_OUT" ]; then
		OUT=`file /nas|grep symbolic`
		if [ -z "$OUT" ]; then
			MSG="$MSG Please replace /nas with a link to /home and remove auto.nas from auto.master<br>"
			EXIT=3
		fi
	   fi
	fi

	if [ ! -z "`grep net /etc/auto.master|grep -v net3|grep hosts`" ]; then
		if [ -z "`grep SC.headnodes /etc/auto.master`" ]; then
			MSG="$MSG auto.master config still uses /net via NFS3. Please update.<br>"
			EXIT=3
		fi
	fi
<% end %>
	if [ -z "`grep security /etc/samba/smb.conf | grep ads |grep -v '^#'`" ]; then
		MSG="$MSG Samba config not bound to AD.<br>"
		EXIT=3
	fi
<% if classes.include?("hw_kvm") %>
	if [ ! -z "`cat /proc/cpuinfo | grep QEMU`" ]; then
		if [ ! -z "`cat /proc/diskstats |grep hda1`" ]; then
			MSG="$MSG This KVM still uses IDE emulation. Please replace by virtio.<br>"
			EXIT=3
		fi
		if [ -e /sbin/lspci ]; then 
			LSPCI=/sbin/lspci
		else 
			LSPCI=/usr/bin/lspci
		fi
		if [ ! -z "`$LSPCI |grep RTL-8139`" ]; then
			MSG="$MSG This KVM still uses emulated network driver. Please replace by virtio.<br>"
			EXIT=3
		fi
	fi
<% end %>
<% if @operatingsystem =~ /RedHat|CentOS|Fedora/ %>
	#
	#	RedHat stuff only
	#

	if [ -e /var/log/getload.log ]; then
		if [ ! -z "`find /var/log/getload.log -mmin -10`" ]; then
			MSG="$MSG Host is still generating BRRRD data. Please disable it in cron.<BR>"
			EXIT=3
		fi
	fi
	if [ -z "`uname -a |egrep '(2.6.3|bsse|lustre|2.6.18-2)'`" ]; then
		if [ "`uname -p`" == "x86_64" ]; then
			MSG="$MSG This system is not running a BSSE patched NFS4 kernel. Please update.<br>"
			EXIT=3
		fi
	fi
	<% if @fqdn != "bs-otrs02.ethz.ch" %>
	if [ ! -z "`/sbin/chkconfig --list|grep puppet|grep -v puppetmaster|grep 3:on`" ]; then
		MSG="$MSG This system runs puppet as a service. Please change to crontab.<br>"
		EXIT=3
	fi
	<% end %>
	if [ "$ERB_OSMAJOR" == 6 ]; then
		MSG="$MSG WARNING : This is a RedHat 6.0 server!<br>"
		EXIT=3
	fi

	SMBSUBVER=`smbclient --version|awk -F. '{print $2}'`
	if [ $SMBSUBVER -lt 5 ]; then
		MSG="$MSG Samba is still on V3.$SMBSUBVER! Please update to Version 3.5 or higher<br>"
		EXIT=3
	fi
	if [ "$ERB_OSMAJOR" -lt 6 ]; then
	   if [ -f "/var/log/yum.cron.failed.lock" ]; then
		WHEN=`stat /var/log/yum.cron.failed.lock | grep Change | awk '{print $2" "$3}' | sed "s/\..*//"`
		MSG="$MSG The last yum update failed at $WHEN <br>"
		EXIT=3
	   fi
	fi
<% end %>
	FSUBVERS=`echo $ERB_FACTERVER | awk -F. '{print $2$3}'`
	if [ "$FSUBVERS" -lt 56 ]; then
	                MSG="$MSG Facter version $ERB_FACTERVER is too old. Please update to 1.5.6 or higher."
	                EXIT=3
	fi
	FSUBVERS=`echo $ERB_PUPPETVER | awk -F. '{print $1$2}'`
	if [ "$FSUBVERS" -lt 26 ]; then
	                MSG="$MSG Puppet version $ERB_PUPPETVER is too old. Please update to 2.6.0 or higher."
	                EXIT=3
	fi

	for i in `echo $UNWANTED_PROCS`; do
		if [ ! -z "`ps ax|grep -v grep |grep $i`" ]; then
			MSG="$MSG Unwanted process $i is running. Please stop and remove.<br>"
			EXIT=3
		fi
	done

	if [ ! -z "$ISKVM" ]; then
#		if [ -z "`grep console /boot/grub/menu.lst |grep ttyS0`" ]; then
#			MSG="$MSG This KVM has no kernel serial console enabled.<br>"
#			EXIT=3
#		fi
		if [ ! -e /etc/debian_version ]; then
			if [ -z "`grep ttyS0 /etc/inittab`" ]; then
				if [ -z "`test -e /etc/redhat-release && grep Fedora /etc/redhat-release`" ]; then
					MSG="$MSG This KVM has no serial console in the /etc/inittab<br>"
					EXIT=3
				fi
			fi
		fi
	fi
	if [ -e /etc/nologin ]; then
		MSG="$MSG Login for users disabled on this host (/etc/nologin)<br>"
		EXIT=1
	fi

fi

if [ "$EXIT" == 0]; then
	MSG="CLEAR"
fi

echo "Status : $MSG"

setLogState "linux-bsse-misc" "$EXIT" "$MSG"

exit $EXIT
