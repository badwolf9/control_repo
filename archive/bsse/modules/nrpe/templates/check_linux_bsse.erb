#!/bin/bash
#
# This file was autogenerated on <%= File.mtime("#{file}").strftime("%m/%d/%Y %T %Z") %> # by puppet <%= @puppetversion %>
# It can still be managed manually but will be overwritten on the next run.
# SVN <%= %x(svn info #{file} | grep Revision | tr -d "\n")%>
#
#

EXIT=0
PID=$$
PROCS=`ps -ef| grep check_linux_bsse |egrep -v "grep|$PID"`
UNAME=`uname -a`


#	ERB tests
ERB_OSNAME=<%= scope.lookupvar("::operatingsystem") %>
ERB_OSREL=<%= scope.lookupvar("::operatingsystemrelease") %>
ERB_OSMAJOR=<%= scope.lookupvar("::lsbmajdistrelease") %>
ERB_OSRELEASE=<% scope.lookupvar("::lsbdistrelease") %>
ERB_FACTERVER=<%= scope.lookupvar("::facterversion") %>
ERB_PUPPETVER=<%= scope.lookupvar("::puppetversion") %>
ERB_SWAP="<%= scope.lookupvar("::swapsize") %>"
<% if scope.lookupvar("::operatingsystem") =~ /RedHat|CentOS|Fedora/ %>ERB_REDHAT=1<% end %>
<% if scope.lookupvar("::operatingsystem") =~ /Debian|Ubuntu/ %>ERB_DEBIAN=1<% end %>

# Test for these processes if they run
UNWANTED_PROCS="pcscd hplip krb5-auth-dialog winbindd hpssd.py yum-updatesd ksmtuned"

# Check - kill - clear Puppet if it appears hung (more than 1 hour old)
PUPPET_PROCS=`ps ax | grep puppet |grep -v grep|awk '{print $1}'`
PUPPET_PID=`find /opt/puppetlabs/puppet/cache/state -name agent_catalog_run.lock -mmin +60 -exec cat {} \;`


### TODO maybe some work left here

#STALE_PUPPET_LOCK=`find /var/lib/puppet/state -name agent_catalog_run.lock -mmin +60`
#if [ -f $STALE_PUPPET_LOCK ]&&[ -z $PUPPET_PROCS ];then
#    rm -f $STALE_PUPPET_LOCK
#fi
for PID in $PUPPET_PROCS;do
  if [[ "$PUPPET_PID" -eq "$PID" ]];then
    kill -9 $PUPPET_PROCS
    rm -f /opt/puppetlabs/puppet/cache/state/puppetdlock
  fi
done

function compressLog(){
	NAGLOG="/var/log/nagios-collector.log"
	#cat $NAGLOG | awk -F: '{ if($3>0)a[$3]=$0; } END{ print a[1]"\n"a[2]"\n"a[3];}' >${NAGLOG}.TMP
	cat $NAGLOG | perl -e 'while (<stdin>) { ($src,$t,$state,@trash)=split /:/; if($h{$src}{$state}<$t){$h{$src}{$state}=$t; $d{$src}{$state}=$_; }; } foreach $k(keys %h){ foreach(1,2,3) {$l=$d{$k}{$_}; print $l if defined($l); }};' >${NAGLOG}.TMP
	# awk -F: '{ if($3>0)a[$3]=$0; } END{ print a[1]"\n"a[2]"\n"a[3];}' >${NAGLOG}.TMP
	chmod ${NAGLOG}.TMP --reference $NAGLOG
	chown ${NAGLOG}.TMP --reference $NAGLOG
	mv ${NAGLOG}.TMP $NAGLOG

}
function setLogState(){
#
# SRC is the SOURCE of the error
# LVL is 1,2,3 (warn,err,unknown) - see nagios
# LOG is the loginfo
# LOGFILE is the logfile with further details (not mandatory)
#
# The output format is : timestamp:source:level:detailed_logfile:comment/loginfo
#
        SRC=$1
        LVL=$2
        LOG=$3
        LOGFILE=$4
        TIME=`date "+%s"`
        LOGDEST="/var/log/nagios-collector.log";
        echo "$SRC:$TIME:$LVL:$LOGFILE:$LOG" >>$LOGDEST
}


if [ ! -z "`echo $PROCS | grep -v $PID`" ]&&[ `echo $PROCS|awk '{print $5}'` != `date +%H:%M` ]; then
#        echo $PROCS
#        MSG="$MSG Detected stale check script on $HOSTNAME!. $$ $PID $PID2"
	setLogState "linux-misc" 3 "Detected stale check script on $HOSTNAME!"
	exit 3
else
	#
	# Determine parameters
	#
	# See http://aplawrence.com/Unix/getopts.html for getopts tutorial
	args=`getopt apo $*`
	if test $? != 0
	     then
	         echo 'Usage: $0 [-p to check for portmap][-a to check autofs stuff]'
	         exit 1
	fi
	set -- $args
	for i
	do
	  case "$i" in
	        -p) shift;export PMAP=1;shift;;
	        -a) shift;export AUTOFS=1;shift;;
	        -o) shift;export OSTEST=1;shift;;
	  esac
	done
<% if classes.include?("hw-dell") %>
	if [ -e /opt/dell/srvadmin/etc/omreg.cfg ]; then
		OMVER=`grep openmanage.version /opt/dell/srvadmin/etc/omreg.cfg | awk -F= '{print $2}'`
                if [[ "$OMVER" < "6.5.0" ]]; then
			MSG="$MSG This server runs an old OpenManage (V$OMVER). Please update to 6.5.0.<br>"
			EXIT=3
		fi
	fi
<% end %>
	# Check for portmapper on all ports

	if [ "$PMAP" == "1" ]; then
		OUT=`grep PMAP_ARGS /etc/sysconfig/network`
		if [ -z "$OUT" ]; then
			ENABLED=`chkconfig --list|grep portmap|grep :on`
			if [ ! -z "$ENABLED" ]; then
			#	MSG="$MSG Portmapper listens on *.*:111 and is enabled."
				MSG="$MSG Portmapper listens on *.*:111 and is enabled."
			fi
			EXIT=3
		fi
	fi
<% if classes.include?("service_autofs") %>
	#	Check for autofs stuff
	#
	if [ "$AUTOFS" == 1 ]; then
	   AUTOFS_OUT=`ps ax|grep automount|grep -v grep`
	   if [ ! -z "$AUTOFS_OUT" ]; then
		OUT=`file /nas|grep symbolic`
		if [ -z "$OUT" ]; then
			MSG="$MSG Please replace /nas with a link to /home and remove auto.nas from auto.master<br>"
			EXIT=3
		fi
	   fi
	fi
    for UNAME in `grep "bs-sw/export/home/" /proc/mounts|awk '{print $2}'|awk -F\/ '{print $(NF)}'`;do
        id $UNAME > /dev/null 2>&1
        RETURN=$?
        if [ $RETURN != 0 ];then
            umount -f /net/bs-sw/export/home/$UNAME > /dev/null 2>&1
        fi
    done
<% end %>

<% if !classes.include?("service-nfsserver") %>
#
#	Protected via /etc/hosts.allow
#
#	if [ ! -z "`netstat -lanpt|grep LISTEN|grep 111|grep 0.0.0.0`" ]; then
#			MSG="$MSG Portmapper running globally. Please change to localhost only"
#			EXIT=3
#	fi
<% end %>

<% if scope.lookupvar("::operatingsystem") =~ /RedHat|CentOS|Fedora/ %>
	#
	#	RedHat stuff only
	#
	<% if @fqdn !~ /^bs-grid/ && @fqdn !~ /^bs-compile/ && @fqdn !~ /^bs-build/ %>
		if [ "$ERB_OSMAJOR" == 5 ]; then
			MSG="$MSG WARNING : This is still a RedHat $ERB_OSREL system!<br>"
			EXIT=3
		fi
	<% end %>
	if [ "$ERB_OSMAJOR" == 6 ]; then
		if [ -f /etc/yum.repos.d/bsse6.repo ]; then
			MSG="$MSG This host still has /etc/yum.repos.d/bsse6.repo!<br>"
		fi
		if [ -f /etc/yum.repos.d/bsse-rh6.repo ]; then
			MSG="$MSG This host still has /etc/yum.repos.d/bsse-rh6.repo!<br>"
		fi
	fi

	if [ "$ERB_OSMAJOR" -lt 7 ]; then
	   if [ -f "/var/log/yum.cron.failed.lock" ]; then
		WHEN=`stat /var/log/yum.cron.failed.lock | grep Change | awk '{print $2" "$3}' | sed "s/\..*//"`
		MSG="$MSG The last yum update failed at $WHEN <br>"
		EXIT=3
	   fi
	fi
<% end %>
	FSUBVERS=`echo $ERB_FACTERVER | awk -F. '{print $1$2$3}'`
	if [ "$FSUBVERS" -lt 175 ]; then
	                MSG="$MSG Facter version $ERB_FACTERVER is too old. Please update to 1.7.5 or higher."
	                EXIT=3
	fi
	FSUBVERS=`echo $ERB_PUPPETVER | awk -F. '{print $1$2}'`
	if [ "$FSUBVERS" -lt 34 ]; then
	                MSG="$MSG Puppet version $ERB_PUPPETVER is too old. Please update to 3.4.0 or higher."
	                EXIT=3
	fi

	for i in `echo $UNWANTED_PROCS`; do
		if [ ! -z "`ps ax|grep -v grep |grep $i`" ]; then
			MSG="$MSG Unwanted process $i is running. Please stop and remove.<br>"
			EXIT=3
		fi
	done

	if [ ! -z "$ISKVM" ]; then
#		if [ -z "`grep console /boot/grub/menu.lst |grep ttyS0`" ]; then
#			MSG="$MSG This KVM has no kernel serial console enabled.<br>"
#			EXIT=3
#		fi
		if [ ! -e /etc/debian_version ]; then
			if [ -z "`grep ttyS0 /etc/inittab`" ]; then
				if [ -z "`test -e /etc/redhat-release && grep Fedora /etc/redhat-release`" ]; then
					MSG="$MSG This KVM has no serial console in the /etc/inittab<br>"
					EXIT=3
				fi
			fi
		fi
	fi

	setLogState "linux-misc" "$EXIT" "$MSG"

#
#
#	WARNING queries come here
#
#
	OLDEXIT=$EXIT
	MSG=""
	EXIT=0

	if [ -e /etc/nologin ]; then
		MSG="$MSG Login for users disabled on this host (/etc/nologin)"
		EXIT=1
	fi

	DO_STALE_NFS=YES
	df > /dev/null 2>&1 &
	count=0
	DFPID=$!
	while kill -0 $DFPID > /dev/null 2>&1 && [ $count -lt 5 ]
	do
		sleep 10
		count=`expr $count + 1`
		if [ $count == 12 ];then
			kill -9 $DFPID
			MSG="$MSG df command is hanging - NFS server gone?"
			DO_STALE_NFS=NO
			EXIT=1
		fi
	done

	if [ $DO_STALE_NFS != 'NO' ];then
		if [ ! -z "`df 2>& 1 | grep Stale.NFS`" ]; then
			MSG="$MSG Stale NFS handles detected!!! Please fix by remounting."
			EXIT=1
		fi
	fi

	OUT=`/sbin/ifconfig |grep Bcast | sed "s/.*Bcast://"|sed "s/ .*//"|awk -F\. '{ if( $4%2 ==0 ){print "Broadcast adress "$1"."$2"."$3"."$4" not valid."}}'`
	if [ ! -z "$OUT" ]; then
		MSG="$MSG $OUT"
		EXIT=1
	fi

	OUT=`grep "^..:..:" /etc/sysconfig/network-scripts/ifcfg-*|awk -F: '{print $1}'|sort -u | tr "\n" "&" | sed -e "s/&$//" -e "s/&/ and /"`
	if [ ! -z "$OUT" ]; then
		MSG="$MSG Fishy interface config in $OUT"
		EXIT=1
	fi

	if [ "`echo $ERB_SWAP | cut -f 1 -d .`" == 0 ]; then
		MSG="$MSG This host has no swap! Please fix"
		EXIT=1
	fi

	if [ -d "/local0/kvm" ]; then
		for i in `ifconfig |grep HWaddr |awk '{ print $1}'`; do
        	ERR="";
        	ERR=`ifconfig $i | grep errors |grep -v errors:0`;
        	XFER=`echo $ERR | awk -F: '{print $2}' | awk '{print $1}'`;
        	XERR=`echo $ERR | awk -F: '{print $3}' | awk '{print $1}'`;
        	if [ "$XFER" ]; then
        	        let RATIO="$XERR*100/$XFER"
			if [ "$RATIO" -gt "10" ]; then
				setLogState "linux-misc" "1" "Interface $i has $RATIO % errors."
			fi
        	fi
		done
	fi
fi


if [ "$EXIT" == "0" ]; then
	if [ "$OLDEXIT" == "0" ]; then
		setLogState "linux-misc" "1" "CLEAR"
		setLogState "linux-misc" "2" "CLEAR"
		setLogState "linux-misc" "3" "CLEAR"
	fi
	if [ "$OLDEXIT" == "3" ]; then
		setLogState "linux-misc" "1" "CLEAR"
		setLogState "linux-misc" "2" "CLEAR"
	fi
	compressLog
	exit $OLDEXIT
else
	setLogState "linux-misc" "$EXIT" "$MSG"
	compressLog
	exit $EXIT
fi

#echo "Status : $MSG"

