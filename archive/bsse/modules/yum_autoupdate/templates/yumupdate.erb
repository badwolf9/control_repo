#!/bin/sh

#
# This file was autogenerated on <%= File.mtime("#{file}").strftime("%m/%d/%Y %T %Z") %> # by puppet <%= @puppetversion %>
# It can still be managed manually but will be overwritten on the next run.
#

THIS_HOST=`uname -n`
DAY=`/bin/date '+%u'`
if [ -z "$BSSE_TIMEOUT" ]; then
	TIMEOUT=60
else
	TIMEOUT=$((BSSE_TIMEOUT+1))
fi

function setLogState(){
#
# SRC is the SOURCE of the error
# LVL is 1,2,3 (warn,err,unknown) - see nagios
# LOG is the loginfo
# LOGFILE is the logfile with further details (not mandatory)
#
# The output format is : timestamp:source:level:detailed_logfile:comment/loginfo
#
        SRC=$1
        LVL=$2
        LOG=$3
        LOGFILE=$4
        TIME=`date "+%s"`
        LOGDEST="/var/log/nagios-collector.log";
        echo "$SRC:$TIME:$LVL:$LOGFILE:$LOG" >>$LOGDEST
}

ERR=`/usr/bin/yum check-update 2>&1 | grep -1 Error.Message | grep -v "^$" | tr -d "\n"`
if [ ! -z "$ERR" ]; then
	setLogState yumupdate 3 "YUM : $ERR" "/var/log/yum.cron.log"
	/usr/bin/yum check-update 2>&1 >>/var/log/yum.cron.log
	exit 1
fi

#
#	Clean YUM dbs every Sunday
#
if [ "$DAY" == "7" ]; then
	/usr/bin/yum -y -e 0 -d 1 clean all >/dev/null 2>&1
fi

#
#       Update yum first (wait up to 10mins, randomized)
#
/usr/bin/yum  -R 10 -e 0 -d 1 -y update yum > /var/log/yum.cron.log 2>&1
/usr/bin/yum  -R 10 -e 0 -d 1 -y install yum-plugin-security > /var/log/yum.cron.log 2>&1
cat /var/log/yum.cron.log | grep dell-omsa-indep
if [ $? != 0 ]; then
   echo disable old dell repo because of dell-omsa-indep repo not found >> /var/log/yum.cron.log 2>&1
   yum-config-manager --disable dell-omsa-indep
   yum clean all
   yum update
#  yum-config-manager --enable dell-omsa-indep
fi
#
#       Update rest (wait up to 1h, randomized)
#

if [ -e /etc/yum.repos.d/rpmforge.repo ]; then
	RPMFORGE="--disablerepo rpmforge"
fi

<% if @operatingsystemrelease == "6.0" && @operatingsystem =~ /RedHat|CentOS/ %>#   Updates skipped due to release upgrade
setLogState yumupdate 3 "The yum update was skipped due to RHEL6.1 release" "/var/log/yum.cron.log"
exit 0
<% else %>
# Check for bs-ci01 and bs-ci03 from SIS, they need a defined version of firefox...
<% if @hostname =~ /bs-ci01|bs-ci03/ -%>
/usr/bin/yum --disablerepo epel $RPMFORGE -R $TIMEOUT -e 0 -d 1 -y --exclude autofs --exclude R* --exclude httpd --exclude qemu* --exclude vgabios* --exclude httpd --exclude nx --exclude nscd --exclude firefox* --exclude xulrunner* --exclude kernel* --exclude *libc* --exclude postgres* --exclude "*iscsi*" --exclude "*virt*" --exclude puppet --exclude ndoutils --exclude openldap* --exclude "*pgsql*" --skip-broken update  >> /var/log/yum.cron.log 2>&1
<% else -%>
/usr/bin/yum --disablerepo epel $RPMFORGE -R $TIMEOUT -e 0 -d 1 -y --exclude autofs --exclude R* --exclude httpd --exclude qemu* --exclude vgabios* --exclude httpd --exclude nx --exclude nscd --exclude kernel* --exclude *libc* --exclude postgres* --exclude "*iscsi*" --exclude "*virt*" --exclude puppet --exclude ndoutils --exclude openldap* --exclude "*pgsql*" --exclude gitlab-ce --skip-broken update  >> /var/log/yum.cron.log 2>&1
<% end -%>
<% end %>

ERR=$?

if [ "$ERR" -eq "0" ]; then
    setLogState yumupdate 0 "CLEAR" "/var/log/yum.cron.log"
    setLogState yumupdate 3 "CLEAR" "/var/log/yum.cron.log"
    exit 0
else
    setLogState yumupdate 3 "The yum update failed." "/var/log/yum.cron.log"
fi
